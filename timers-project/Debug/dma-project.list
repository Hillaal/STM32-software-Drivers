
dma-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001830  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080019c8  080019c8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080019c8  080019c8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080019c8  080019c8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019c8  080019c8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019c8  080019c8  000119c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080019d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000007c  08001a4c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001a4c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f95  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007d3  00000000  00000000  00022041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00022818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000229d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c1d  00000000  00000000  00022b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001290  00000000  00000000  0002474d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008d9c  00000000  00000000  000259dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002e779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007a8  00000000  00000000  0002e7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080019b0 	.word	0x080019b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080019b0 	.word	0x080019b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <DMA_voidInit>:
#define RCC_AHB1ENR		*((volatile u32*)(0x40023800 + 0x30))

/************************************************************/
/*						FUNCTION DEFINITIONS				*/
/************************************************************/
void DMA_voidInit(DMA_dtype* DMA_ptr){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if((u32)DMA_ptr == (u32)DMA1_BASE_ADDRESS){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <DMA_voidInit+0x38>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d106      	bne.n	8000ae2 <DMA_voidInit+0x1e>
		SET_BIT(RCC_AHB1ENR, 21);
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <DMA_voidInit+0x3c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <DMA_voidInit+0x3c>)
 8000ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ade:	6013      	str	r3, [r2, #0]
	}
	else{
		SET_BIT(RCC_AHB1ENR, 22);
	}
}
 8000ae0:	e005      	b.n	8000aee <DMA_voidInit+0x2a>
		SET_BIT(RCC_AHB1ENR, 22);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <DMA_voidInit+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <DMA_voidInit+0x3c>)
 8000ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40026000 	.word	0x40026000
 8000b00:	40023830 	.word	0x40023830

08000b04 <DMA_voidConfigureStream>:


ErrorStatus DMA_voidConfigureStream(DMA_dtype* DMA_ptr, u8 stream_idx, streamCofig_dtype* streamConfig_ptr){
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	72fb      	strb	r3, [r7, #11]
	if(stream_idx > 7){
 8000b12:	7afb      	ldrb	r3, [r7, #11]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	d901      	bls.n	8000b1c <DMA_voidConfigureStream+0x18>
		return ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e285      	b.n	8001028 <DMA_voidConfigureStream+0x524>
	}

	if((streamConfig_ptr->transfer_direction == MEMORY_TO_MEMORY) && ((u32)DMA_ptr == (u32)DMA1_BASE_ADDRESS)){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7a9b      	ldrb	r3, [r3, #10]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d105      	bne.n	8000b30 <DMA_voidConfigureStream+0x2c>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <DMA_voidConfigureStream+0x108>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <DMA_voidConfigureStream+0x2c>
		return ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e27b      	b.n	8001028 <DMA_voidConfigureStream+0x524>
	}

	if((streamConfig_ptr->memory_size == TWO_BYTES) && (streamConfig_ptr->peripheral_size == ONE_BYTE)){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7bdb      	ldrb	r3, [r3, #15]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10c      	bne.n	8000b52 <DMA_voidConfigureStream+0x4e>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7c1b      	ldrb	r3, [r3, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d108      	bne.n	8000b52 <DMA_voidConfigureStream+0x4e>
		if(streamConfig_ptr->number_of_transactions % 2){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	891b      	ldrh	r3, [r3, #8]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d023      	beq.n	8000b96 <DMA_voidConfigureStream+0x92>
			return ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e26a      	b.n	8001028 <DMA_voidConfigureStream+0x524>
		}
	}
	else if((streamConfig_ptr->memory_size == FOUR_BYTES) && (streamConfig_ptr->peripheral_size == ONE_BYTE)){
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7bdb      	ldrb	r3, [r3, #15]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d10c      	bne.n	8000b74 <DMA_voidConfigureStream+0x70>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7c1b      	ldrb	r3, [r3, #16]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d108      	bne.n	8000b74 <DMA_voidConfigureStream+0x70>
		if(streamConfig_ptr->number_of_transactions % 4){
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	891b      	ldrh	r3, [r3, #8]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d012      	beq.n	8000b96 <DMA_voidConfigureStream+0x92>
			return ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e259      	b.n	8001028 <DMA_voidConfigureStream+0x524>
		}
	}
	else if((streamConfig_ptr->memory_size == FOUR_BYTES) && (streamConfig_ptr->peripheral_size == TWO_BYTES)){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7bdb      	ldrb	r3, [r3, #15]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d10c      	bne.n	8000b96 <DMA_voidConfigureStream+0x92>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7c1b      	ldrb	r3, [r3, #16]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d108      	bne.n	8000b96 <DMA_voidConfigureStream+0x92>
		if(streamConfig_ptr->number_of_transactions % 2){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	891b      	ldrh	r3, [r3, #8]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <DMA_voidConfigureStream+0x92>
			return ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e248      	b.n	8001028 <DMA_voidConfigureStream+0x524>
		}
	}

	/* check BURST configs */
	if(((streamConfig_ptr->burst.memory_beats != 0) || (streamConfig_ptr->burst.peripheral_beats != 0))){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7b5b      	ldrb	r3, [r3, #13]
 8000b9a:	2b00      	cmp	r3, #0
		if(((streamConfig_ptr->fifo_threshold + 1) * 4) % 4){
			return ERROR;
		}
	}

	if(((streamConfig_ptr->burst.memory_beats != 0) || (streamConfig_ptr->burst.peripheral_beats != 0))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7b5b      	ldrb	r3, [r3, #13]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d103      	bne.n	8000bac <DMA_voidConfigureStream+0xa8>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b9b      	ldrb	r3, [r3, #14]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d018      	beq.n	8000bde <DMA_voidConfigureStream+0xda>
			&& streamConfig_ptr->circular_mode == TRUE){ /* if BURST enabled with circular mode */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7c5b      	ldrb	r3, [r3, #17]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d114      	bne.n	8000bde <DMA_voidConfigureStream+0xda>
		/*check if DMA_SxNDTR = Multiple of ((Mburst beat) × (Msize)/(Psize)) is satisfied or not */
		u16 estimated_number_of_transcations = streamConfig_ptr->burst.memory_beats * (streamConfig_ptr->memory_size / streamConfig_ptr->peripheral_size);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7b5b      	ldrb	r3, [r3, #13]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7bd9      	ldrb	r1, [r3, #15]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7c1b      	ldrb	r3, [r3, #16]
 8000bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	fb12 f303 	smulbb	r3, r2, r3
 8000bce:	82fb      	strh	r3, [r7, #22]
		if(estimated_number_of_transcations != streamConfig_ptr->number_of_transactions){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	891b      	ldrh	r3, [r3, #8]
 8000bd4:	8afa      	ldrh	r2, [r7, #22]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d001      	beq.n	8000bde <DMA_voidConfigureStream+0xda>
			return ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e224      	b.n	8001028 <DMA_voidConfigureStream+0x524>
		}
	}

	if((streamConfig_ptr->circular_mode == TRUE) && (streamConfig_ptr->flow_controller == PERIPHERAL_FLOW_CONTROLLER)){
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7c5b      	ldrb	r3, [r3, #17]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d105      	bne.n	8000bf2 <DMA_voidConfigureStream+0xee>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7e9b      	ldrb	r3, [r3, #26]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d101      	bne.n	8000bf2 <DMA_voidConfigureStream+0xee>
		return ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e21a      	b.n	8001028 <DMA_voidConfigureStream+0x524>
	}

	if((streamConfig_ptr->peripheral_size != streamConfig_ptr->memory_size) && (streamConfig_ptr->direct_mode == DIRECT_MODE_ENABLED)){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7c1a      	ldrb	r2, [r3, #16]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7bdb      	ldrb	r3, [r3, #15]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d008      	beq.n	8000c10 <DMA_voidConfigureStream+0x10c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7edb      	ldrb	r3, [r3, #27]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d104      	bne.n	8000c10 <DMA_voidConfigureStream+0x10c>
		return ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e20e      	b.n	8001028 <DMA_voidConfigureStream+0x524>
 8000c0a:	bf00      	nop
 8000c0c:	40026000 	.word	0x40026000
	}

	/* disable the stream and wait for it to be disabled */
	DMA_ptr->S[stream_idx].CR = 0x00;
 8000c10:	7afa      	ldrb	r2, [r7, #11]
 8000c12:	68f9      	ldr	r1, [r7, #12]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3310      	adds	r3, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
	while(GET_BIT(DMA_ptr->S[stream_idx].CR, 0));
 8000c24:	bf00      	nop
 8000c26:	7afa      	ldrb	r2, [r7, #11]
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	3310      	adds	r3, #16
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f2      	bne.n	8000c26 <DMA_voidConfigureStream+0x122>

	/* set the number of transcations in NDTR */
	DMA_ptr->S[stream_idx].NDTR = streamConfig_ptr->number_of_transactions;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	891b      	ldrh	r3, [r3, #8]
 8000c44:	7afa      	ldrb	r2, [r7, #11]
 8000c46:	4618      	mov	r0, r3
 8000c48:	68f9      	ldr	r1, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	440b      	add	r3, r1
 8000c54:	3314      	adds	r3, #20
 8000c56:	6018      	str	r0, [r3, #0]

	/* apply incremention configurations */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->peripheral_ptr_mode << 9)
 8000c58:	7afa      	ldrb	r2, [r7, #11]
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3310      	adds	r3, #16
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	7cd2      	ldrb	r2, [r2, #19]
 8000c6e:	0251      	lsls	r1, r2, #9
								|(streamConfig_ptr->memory_ptr_mode << 10);
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	7c92      	ldrb	r2, [r2, #18]
 8000c74:	0292      	lsls	r2, r2, #10
 8000c76:	430a      	orrs	r2, r1
 8000c78:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->peripheral_ptr_mode << 9)
 8000c7a:	7afa      	ldrb	r2, [r7, #11]
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4403      	add	r3, r0
 8000c8a:	3310      	adds	r3, #16
 8000c8c:	6019      	str	r1, [r3, #0]

	/* apply memory and peripheral data size */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->memory_size << 13)
 8000c8e:	7afa      	ldrb	r2, [r7, #11]
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3310      	adds	r3, #16
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	7bd2      	ldrb	r2, [r2, #15]
 8000ca4:	0351      	lsls	r1, r2, #13
								|(streamConfig_ptr->peripheral_size << 11);
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	7c12      	ldrb	r2, [r2, #16]
 8000caa:	02d2      	lsls	r2, r2, #11
 8000cac:	430a      	orrs	r2, r1
 8000cae:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->memory_size << 13)
 8000cb0:	7afa      	ldrb	r2, [r7, #11]
 8000cb2:	4319      	orrs	r1, r3
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4403      	add	r3, r0
 8000cc0:	3310      	adds	r3, #16
 8000cc2:	6019      	str	r1, [r3, #0]

	/* apply interrupts configurations */
	SET_VALUE(DMA_ptr->S[stream_idx].FCR, 7, streamConfig_ptr->fifo_error_interrupt_enable);
 8000cc4:	7afa      	ldrb	r2, [r7, #11]
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3324      	adds	r3, #36	; 0x24
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	7afa      	ldrb	r2, [r7, #11]
 8000cd8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4403      	add	r3, r0
 8000ce8:	3324      	adds	r3, #36	; 0x24
 8000cea:	6019      	str	r1, [r3, #0]
 8000cec:	7afa      	ldrb	r2, [r7, #11]
 8000cee:	68f9      	ldr	r1, [r7, #12]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3324      	adds	r3, #36	; 0x24
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	7e12      	ldrb	r2, [r2, #24]
 8000d02:	01d2      	lsls	r2, r2, #7
 8000d04:	4611      	mov	r1, r2
 8000d06:	7afa      	ldrb	r2, [r7, #11]
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4403      	add	r3, r0
 8000d16:	3324      	adds	r3, #36	; 0x24
 8000d18:	6019      	str	r1, [r3, #0]
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->direct_mode_error_interrupt_enable << 1)
 8000d1a:	7afa      	ldrb	r2, [r7, #11]
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	440b      	add	r3, r1
 8000d28:	3310      	adds	r3, #16
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	7dd2      	ldrb	r2, [r2, #23]
 8000d30:	0051      	lsls	r1, r2, #1
								|(streamConfig_ptr->half_transfer_interrupt_enable << 3)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	7d52      	ldrb	r2, [r2, #21]
 8000d36:	00d2      	lsls	r2, r2, #3
 8000d38:	4311      	orrs	r1, r2
								|(streamConfig_ptr->transfer_error_interrupt_enable << 2)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	7d92      	ldrb	r2, [r2, #22]
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4311      	orrs	r1, r2
								|(streamConfig_ptr->transfer_interrupt_enable << 4);
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	7d12      	ldrb	r2, [r2, #20]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->direct_mode_error_interrupt_enable << 1)
 8000d4c:	7afa      	ldrb	r2, [r7, #11]
 8000d4e:	4319      	orrs	r1, r3
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4403      	add	r3, r0
 8000d5c:	3310      	adds	r3, #16
 8000d5e:	6019      	str	r1, [r3, #0]

	/* select channel and select priority of the stream */
	DMA_ptr->S[stream_idx].CR |= streamConfig_ptr->channel_number << 25;
 8000d60:	7afa      	ldrb	r2, [r7, #11]
 8000d62:	68f9      	ldr	r1, [r7, #12]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3310      	adds	r3, #16
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	7ad2      	ldrb	r2, [r2, #11]
 8000d76:	0652      	lsls	r2, r2, #25
 8000d78:	4611      	mov	r1, r2
 8000d7a:	7afa      	ldrb	r2, [r7, #11]
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4403      	add	r3, r0
 8000d8a:	3310      	adds	r3, #16
 8000d8c:	6019      	str	r1, [r3, #0]
	DMA_ptr->S[stream_idx].CR |= streamConfig_ptr->stream_priority << 16;
 8000d8e:	7afa      	ldrb	r2, [r7, #11]
 8000d90:	68f9      	ldr	r1, [r7, #12]
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3310      	adds	r3, #16
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	7b12      	ldrb	r2, [r2, #12]
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	4611      	mov	r1, r2
 8000da8:	7afa      	ldrb	r2, [r7, #11]
 8000daa:	4319      	orrs	r1, r3
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4403      	add	r3, r0
 8000db8:	3310      	adds	r3, #16
 8000dba:	6019      	str	r1, [r3, #0]

	/* apply burst configurations */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->burst.memory_beats << 23)
 8000dbc:	7afa      	ldrb	r2, [r7, #11]
 8000dbe:	68f9      	ldr	r1, [r7, #12]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	3310      	adds	r3, #16
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	7b52      	ldrb	r2, [r2, #13]
 8000dd2:	05d1      	lsls	r1, r2, #23
								|(streamConfig_ptr->burst.peripheral_beats << 21);
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	7b92      	ldrb	r2, [r2, #14]
 8000dd8:	0552      	lsls	r2, r2, #21
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	4611      	mov	r1, r2
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->burst.memory_beats << 23)
 8000dde:	7afa      	ldrb	r2, [r7, #11]
 8000de0:	4319      	orrs	r1, r3
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4403      	add	r3, r0
 8000dee:	3310      	adds	r3, #16
 8000df0:	6019      	str	r1, [r3, #0]

	/* specify the fifo threshold */
	DMA_ptr->S[stream_idx].FCR |= streamConfig_ptr->fifo_threshold;
 8000df2:	7afa      	ldrb	r2, [r7, #11]
 8000df4:	68f9      	ldr	r1, [r7, #12]
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	3324      	adds	r3, #36	; 0x24
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	7e52      	ldrb	r2, [r2, #25]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	7afa      	ldrb	r2, [r7, #11]
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4403      	add	r3, r0
 8000e1a:	3324      	adds	r3, #36	; 0x24
 8000e1c:	6019      	str	r1, [r3, #0]

	/* apply the transfer direction */
	DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->transfer_direction << 6);
 8000e1e:	7afa      	ldrb	r2, [r7, #11]
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3310      	adds	r3, #16
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	7a92      	ldrb	r2, [r2, #10]
 8000e34:	0192      	lsls	r2, r2, #6
 8000e36:	4611      	mov	r1, r2
 8000e38:	7afa      	ldrb	r2, [r7, #11]
 8000e3a:	4319      	orrs	r1, r3
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4403      	add	r3, r0
 8000e48:	3310      	adds	r3, #16
 8000e4a:	6019      	str	r1, [r3, #0]

	if((streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7a9b      	ldrb	r3, [r3, #10]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <DMA_voidConfigureStream+0x35a>
		||  (streamConfig_ptr->transfer_direction == MEMORY_TO_PERIPHERAL)){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7a9b      	ldrb	r3, [r3, #10]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	f040 808d 	bne.w	8000f78 <DMA_voidConfigureStream+0x474>
		/* apply the flow controller config */
		DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->flow_controller << 5);
 8000e5e:	7afa      	ldrb	r2, [r7, #11]
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3310      	adds	r3, #16
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	7e92      	ldrb	r2, [r2, #26]
 8000e74:	0152      	lsls	r2, r2, #5
 8000e76:	4611      	mov	r1, r2
 8000e78:	7afa      	ldrb	r2, [r7, #11]
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4403      	add	r3, r0
 8000e88:	3310      	adds	r3, #16
 8000e8a:	6019      	str	r1, [r3, #0]

		/* apply direct mode config */
		DMA_ptr->S[stream_idx].FCR &= ~(0x3 << 2);
 8000e8c:	7afa      	ldrb	r2, [r7, #11]
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3324      	adds	r3, #36	; 0x24
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	7afa      	ldrb	r2, [r7, #11]
 8000ea0:	f023 010c 	bic.w	r1, r3, #12
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4403      	add	r3, r0
 8000eb0:	3324      	adds	r3, #36	; 0x24
 8000eb2:	6019      	str	r1, [r3, #0]
		DMA_ptr->S[stream_idx].FCR |= (streamConfig_ptr->direct_mode << 2);
 8000eb4:	7afa      	ldrb	r2, [r7, #11]
 8000eb6:	68f9      	ldr	r1, [r7, #12]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3324      	adds	r3, #36	; 0x24
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	7ed2      	ldrb	r2, [r2, #27]
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4611      	mov	r1, r2
 8000ece:	7afa      	ldrb	r2, [r7, #11]
 8000ed0:	4319      	orrs	r1, r3
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4403      	add	r3, r0
 8000ede:	3324      	adds	r3, #36	; 0x24
 8000ee0:	6019      	str	r1, [r3, #0]

		/* apply circular mode config */
		DMA_ptr->S[stream_idx].CR |= (streamConfig_ptr->circular_mode << 8);
 8000ee2:	7afa      	ldrb	r2, [r7, #11]
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3310      	adds	r3, #16
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	7c52      	ldrb	r2, [r2, #17]
 8000ef8:	0212      	lsls	r2, r2, #8
 8000efa:	4611      	mov	r1, r2
 8000efc:	7afa      	ldrb	r2, [r7, #11]
 8000efe:	4319      	orrs	r1, r3
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4403      	add	r3, r0
 8000f0c:	3310      	adds	r3, #16
 8000f0e:	6019      	str	r1, [r3, #0]

		if(streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7a9b      	ldrb	r3, [r3, #10]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d117      	bne.n	8000f48 <DMA_voidConfigureStream+0x444>
			/* set the addresses src and destination */
			DMA_ptr->S[stream_idx].PAR = streamConfig_ptr->src_address;
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6811      	ldr	r1, [r2, #0]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4403      	add	r3, r0
 8000f2c:	6019      	str	r1, [r3, #0]
			DMA_ptr->S[stream_idx].M0AR = streamConfig_ptr->dest_address;
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6851      	ldr	r1, [r2, #4]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4403      	add	r3, r0
 8000f42:	3304      	adds	r3, #4
 8000f44:	6019      	str	r1, [r3, #0]
		if(streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY){
 8000f46:	e06e      	b.n	8001026 <DMA_voidConfigureStream+0x522>
		}
		else{
			/* set the addresses src and destination */
			DMA_ptr->S[stream_idx].M0AR = streamConfig_ptr->src_address;
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6811      	ldr	r1, [r2, #0]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4403      	add	r3, r0
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	6019      	str	r1, [r3, #0]
			DMA_ptr->S[stream_idx].PAR = streamConfig_ptr->dest_address;
 8000f60:	7afb      	ldrb	r3, [r7, #11]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6851      	ldr	r1, [r2, #4]
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4403      	add	r3, r0
 8000f74:	6019      	str	r1, [r3, #0]
		if(streamConfig_ptr->transfer_direction == PERIPHERAL_TO_MEMORY){
 8000f76:	e056      	b.n	8001026 <DMA_voidConfigureStream+0x522>
		}

	}
	else if(streamConfig_ptr->transfer_direction == MEMORY_TO_MEMORY){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7a9b      	ldrb	r3, [r3, #10]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d152      	bne.n	8001026 <DMA_voidConfigureStream+0x522>
		/*select DMA flow controller */
		CLR_BIT(DMA_ptr->S[stream_idx].CR, 5);
 8000f80:	7afa      	ldrb	r2, [r7, #11]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3310      	adds	r3, #16
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	7afa      	ldrb	r2, [r7, #11]
 8000f94:	f023 0120 	bic.w	r1, r3, #32
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4403      	add	r3, r0
 8000fa4:	3310      	adds	r3, #16
 8000fa6:	6019      	str	r1, [r3, #0]

		/* select indirect mode */
		SET_BIT(DMA_ptr->S[stream_idx].FCR, 2);
 8000fa8:	7afa      	ldrb	r2, [r7, #11]
 8000faa:	68f9      	ldr	r1, [r7, #12]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3324      	adds	r3, #36	; 0x24
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	7afa      	ldrb	r2, [r7, #11]
 8000fbc:	f043 0104 	orr.w	r1, r3, #4
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4403      	add	r3, r0
 8000fcc:	3324      	adds	r3, #36	; 0x24
 8000fce:	6019      	str	r1, [r3, #0]

		/* disable circular mode */
		CLR_BIT(DMA_ptr->S[stream_idx].CR, 8);
 8000fd0:	7afa      	ldrb	r2, [r7, #11]
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
 8000fde:	3310      	adds	r3, #16
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	7afa      	ldrb	r2, [r7, #11]
 8000fe4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4403      	add	r3, r0
 8000ff4:	3310      	adds	r3, #16
 8000ff6:	6019      	str	r1, [r3, #0]

		/* set the addresses src and destination */
		DMA_ptr->S[stream_idx].PAR = streamConfig_ptr->src_address;
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4403      	add	r3, r0
 800100c:	6019      	str	r1, [r3, #0]
		DMA_ptr->S[stream_idx].M0AR = streamConfig_ptr->dest_address;
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6851      	ldr	r1, [r2, #4]
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4403      	add	r3, r0
 8001022:	3304      	adds	r3, #4
 8001024:	6019      	str	r1, [r3, #0]
	}

	return SUCCESS;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DMA_voidStartTransfer>:


void DMA_voidStartTransfer(DMA_dtype* DMA_ptr, u8 stream_idx){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
	SET_BIT(DMA_ptr->S[stream_idx].CR, 0);
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3310      	adds	r3, #16
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	78fa      	ldrb	r2, [r7, #3]
 8001054:	f043 0101 	orr.w	r1, r3, #1
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4403      	add	r3, r0
 8001064:	3310      	adds	r3, #16
 8001066:	6019      	str	r1, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <GPIO_Init>:
#include "gpio.h"



void GPIO_Init( char port_id, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State, unsigned char Pulling_State)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
	port_id -= 'A';
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3b41      	subs	r3, #65	; 0x41
 8001088:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	RCC_AHB1ENR |= (0x01 <<port_id);
 800108a:	4b58      	ldr	r3, [pc, #352]	; (80011ec <GPIO_Init+0x178>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4611      	mov	r1, r2
 8001098:	4a54      	ldr	r2, [pc, #336]	; (80011ec <GPIO_Init+0x178>)
 800109a:	430b      	orrs	r3, r1
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d854      	bhi.n	800114e <GPIO_Init+0xda>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <GPIO_Init+0x38>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010e3 	.word	0x080010e3
 80010b4:	08001107 	.word	0x08001107
 80010b8:	0800112b 	.word	0x0800112b
	//configure moder register for pin direction
	switch(PIN_Dir)
	{
		case (INPUT):
				GPIO_MODER(port_id) &= ~(0x03 << 2*PIN_NO);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <GPIO_Init+0x17c>)
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	2103      	movs	r1, #3
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	43d2      	mvns	r2, r2
 80010d2:	4610      	mov	r0, r2
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	4946      	ldr	r1, [pc, #280]	; (80011f0 <GPIO_Init+0x17c>)
 80010d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010dc:	4003      	ands	r3, r0
 80010de:	6013      	str	r3, [r2, #0]
		break;
 80010e0:	e035      	b.n	800114e <GPIO_Init+0xda>
		case (OUTPUT):
				GPIO_MODER(port_id) |= (0x01 << 2*PIN_NO);
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <GPIO_Init+0x17c>)
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	0052      	lsls	r2, r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	4610      	mov	r0, r2
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	493d      	ldr	r1, [pc, #244]	; (80011f0 <GPIO_Init+0x17c>)
 80010fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001100:	4303      	orrs	r3, r0
 8001102:	6013      	str	r3, [r2, #0]
		break;
 8001104:	e023      	b.n	800114e <GPIO_Init+0xda>
		case (ALTERNATE_FUN):
				GPIO_MODER(port_id) |= (0x02 << 2*PIN_NO);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	4a39      	ldr	r2, [pc, #228]	; (80011f0 <GPIO_Init+0x17c>)
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	0052      	lsls	r2, r2, #1
 8001114:	2102      	movs	r1, #2
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4610      	mov	r0, r2
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	4934      	ldr	r1, [pc, #208]	; (80011f0 <GPIO_Init+0x17c>)
 8001120:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001124:	4303      	orrs	r3, r0
 8001126:	6013      	str	r3, [r2, #0]
		break;
 8001128:	e011      	b.n	800114e <GPIO_Init+0xda>
		case (ANALOG):
				GPIO_MODER(port_id) |= (0x03 << 2*PIN_NO);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	4a30      	ldr	r2, [pc, #192]	; (80011f0 <GPIO_Init+0x17c>)
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	0052      	lsls	r2, r2, #1
 8001138:	2103      	movs	r1, #3
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4610      	mov	r0, r2
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	492b      	ldr	r1, [pc, #172]	; (80011f0 <GPIO_Init+0x17c>)
 8001144:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001148:	4303      	orrs	r3, r0
 800114a:	6013      	str	r3, [r2, #0]
		break;
 800114c:	bf00      	nop
	}// end switch
	//configure default state
	switch(Default_State)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <GPIO_Init+0xe8>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d014      	beq.n	8001184 <GPIO_Init+0x110>
 800115a:	e026      	b.n	80011aa <GPIO_Init+0x136>
	{
		case(PUSH_PULL):
				GPIO_OTYPER(port_id) &= ~(0x01<<PIN_NO);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <GPIO_Init+0x17c>)
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	3304      	adds	r3, #4
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	43d2      	mvns	r2, r2
 8001172:	4610      	mov	r0, r2
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	491e      	ldr	r1, [pc, #120]	; (80011f0 <GPIO_Init+0x17c>)
 8001178:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800117c:	3204      	adds	r2, #4
 800117e:	4003      	ands	r3, r0
 8001180:	6013      	str	r3, [r2, #0]
		break;
 8001182:	e012      	b.n	80011aa <GPIO_Init+0x136>
		case(OPEN_DRAIN):
				GPIO_OTYPER(port_id) |= (0x01<<PIN_NO);
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <GPIO_Init+0x17c>)
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	3304      	adds	r3, #4
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	4610      	mov	r0, r2
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <GPIO_Init+0x17c>)
 800119e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011a2:	3204      	adds	r2, #4
 80011a4:	4303      	orrs	r3, r0
 80011a6:	6013      	str	r3, [r2, #0]
		break;
 80011a8:	bf00      	nop
	}//end switch

	GPIO_PUPDR(port_id) = (GPIO_PUPDR(port_id) & ~(0x3 << 2 * PIN_NO)) | (Pulling_State << 2 * PIN_NO);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <GPIO_Init+0x17c>)
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	330c      	adds	r3, #12
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	0052      	lsls	r2, r2, #1
 80011ba:	2103      	movs	r1, #3
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	7e39      	ldrb	r1, [r7, #24]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	0052      	lsls	r2, r2, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	4610      	mov	r0, r2
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	4907      	ldr	r1, [pc, #28]	; (80011f0 <GPIO_Init+0x17c>)
 80011d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011d8:	320c      	adds	r2, #12
 80011da:	4303      	orrs	r3, r0
 80011dc:	6013      	str	r3, [r2, #0]
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023830 	.word	0x40023830
 80011f0:	20000000 	.word	0x20000000

080011f4 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char port_id, unsigned int PIN_NO, unsigned int Data)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	73fb      	strb	r3, [r7, #15]
	port_id -= 'A';
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	3b41      	subs	r3, #65	; 0x41
 8001206:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	if((GPIO_MODER(port_id) & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <GPIO_WritePin+0xa0>)
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	0052      	lsls	r2, r2, #1
 8001216:	2103      	movs	r1, #3
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	401a      	ands	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d12b      	bne.n	8001282 <GPIO_WritePin+0x8e>
	{
		 if(Data)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d012      	beq.n	8001256 <GPIO_WritePin+0x62>
		 {
			 GPIO_ODR(port_id) |= (1<<PIN_NO);
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <GPIO_WritePin+0xa0>)
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	3314      	adds	r3, #20
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4610      	mov	r0, r2
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	4912      	ldr	r1, [pc, #72]	; (8001294 <GPIO_WritePin+0xa0>)
 800124a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800124e:	3214      	adds	r2, #20
 8001250:	4303      	orrs	r3, r0
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e012      	b.n	800127c <GPIO_WritePin+0x88>
		 }
		 else
		 {
			 GPIO_ODR(port_id) &= ~(1<<PIN_NO);
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <GPIO_WritePin+0xa0>)
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	3314      	adds	r3, #20
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	4610      	mov	r0, r2
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <GPIO_WritePin+0xa0>)
 8001272:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001276:	3214      	adds	r2, #20
 8001278:	4003      	ands	r3, r0
 800127a:	6013      	str	r3, [r2, #0]
		 }
		result = OK;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
 8001280:	e001      	b.n	8001286 <GPIO_WritePin+0x92>
	}
	else
	{
		result = NOK;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
	}
	return result;
 8001286:	7dfb      	ldrb	r3, [r7, #23]
}
 8001288:	4618      	mov	r0, r3
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20000000 	.word	0x20000000

08001298 <GPIO_setAlternateFunction>:
unsigned char GPIO_ReadPin(char port_id, unsigned int PIN_NO){
	port_id -= 'A';
	return (GPIO_IDR(port_id) & (1 << PIN_NO)) >> PIN_NO;
}

void GPIO_setAlternateFunction(char port_id, unsigned int PIN_NO, AF_dtype selected_function){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	port_id -= 'A';
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3b41      	subs	r3, #65	; 0x41
 80012ac:	71fb      	strb	r3, [r7, #7]
	if(PIN_NO < 8){
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	d81a      	bhi.n	80012ea <GPIO_setAlternateFunction+0x52>
		GPIO_AFRL(port_id) = (selected_function << (4 * PIN_NO)) | (GPIO_AFRL(port_id) & ~(0x0F << (4 * PIN_NO)));
 80012b4:	79ba      	ldrb	r2, [r7, #6]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <GPIO_setAlternateFunction+0x98>)
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	3320      	adds	r3, #32
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	210f      	movs	r1, #15
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	43d2      	mvns	r2, r2
 80012d8:	4013      	ands	r3, r2
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4914      	ldr	r1, [pc, #80]	; (8001330 <GPIO_setAlternateFunction+0x98>)
 80012de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012e2:	3220      	adds	r2, #32
 80012e4:	4303      	orrs	r3, r0
 80012e6:	6013      	str	r3, [r2, #0]
	}
	else{
		GPIO_AFRH(port_id) = (selected_function << (4 * (PIN_NO - 8))) | (GPIO_AFRH(port_id) & ~(0x0F << (4 * (PIN_NO - 8))));
	}
}
 80012e8:	e01b      	b.n	8001322 <GPIO_setAlternateFunction+0x8a>
		GPIO_AFRH(port_id) = (selected_function << (4 * (PIN_NO - 8))) | (GPIO_AFRH(port_id) & ~(0x0F << (4 * (PIN_NO - 8))));
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3b08      	subs	r3, #8
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <GPIO_setAlternateFunction+0x98>)
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	3324      	adds	r3, #36	; 0x24
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	3a08      	subs	r2, #8
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	210f      	movs	r1, #15
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	43d2      	mvns	r2, r2
 8001312:	4013      	ands	r3, r2
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	4906      	ldr	r1, [pc, #24]	; (8001330 <GPIO_setAlternateFunction+0x98>)
 8001318:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800131c:	3224      	adds	r2, #36	; 0x24
 800131e:	4303      	orrs	r3, r0
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000000 	.word	0x20000000

08001334 <DMA2_Stream7_IRQHandler>:
#include "uart.h"

char str1[100] = "hello world!";
char str2[100] = "";

void DMA2_Stream7_IRQHandler(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af02      	add	r7, sp, #8
//	USART1_voidSendString((u8*)str2);
	GPIO_Init('A', P0, OUTPUT, PUSH_PULL, NO_PULLING);
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	2201      	movs	r2, #1
 8001342:	2100      	movs	r1, #0
 8001344:	2041      	movs	r0, #65	; 0x41
 8001346:	f7ff fe95 	bl	8001074 <GPIO_Init>
	GPIO_WritePin('A', P0, HIGH);
 800134a:	2201      	movs	r2, #1
 800134c:	2100      	movs	r1, #0
 800134e:	2041      	movs	r0, #65	; 0x41
 8001350:	f7ff ff50 	bl	80011f4 <GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <init_uart1_comm>:

void init_uart1_comm(void){
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af02      	add	r7, sp, #8

	/* setup RX, Tx pins */
	GPIO_Init('A', P9, ALTERNATE_FUN, PUSH_PULL, NO_PULLING);
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	2202      	movs	r2, #2
 8001368:	2109      	movs	r1, #9
 800136a:	2041      	movs	r0, #65	; 0x41
 800136c:	f7ff fe82 	bl	8001074 <GPIO_Init>
	GPIO_setAlternateFunction('A', P9, AF7);
 8001370:	2207      	movs	r2, #7
 8001372:	2109      	movs	r1, #9
 8001374:	2041      	movs	r0, #65	; 0x41
 8001376:	f7ff ff8f 	bl	8001298 <GPIO_setAlternateFunction>

	/* create configurations instance for USART1 */

	uartConfig_dtype Uart1_config;

	Uart1_config.parity.enable = 					DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	703b      	strb	r3, [r7, #0]
	Uart1_config.parity.type = 						EVEN;
 800137e:	2300      	movs	r3, #0
 8001380:	707b      	strb	r3, [r7, #1]
	Uart1_config.over_eight = 						DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	70bb      	strb	r3, [r7, #2]
	Uart1_config.clock_phase = 						FIRST_CLOCK;
 8001386:	2300      	movs	r3, #0
 8001388:	733b      	strb	r3, [r7, #12]
	Uart1_config.clock_polarity = 					STEADY_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	72fb      	strb	r3, [r7, #11]
	Uart1_config.clock_synch = 						DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	727b      	strb	r3, [r7, #9]
	Uart1_config.parity_error_interrupt = 			DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	71bb      	strb	r3, [r7, #6]
	Uart1_config.receive_complete_interrupt = 		DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	717b      	strb	r3, [r7, #5]
	Uart1_config.receiver =							DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	723b      	strb	r3, [r7, #8]
	Uart1_config.stopBit = 							HALF_STOP_BIT;
 800139e:	2301      	movs	r3, #1
 80013a0:	72bb      	strb	r3, [r7, #10]
	Uart1_config.word_length = 						EIGHT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	70fb      	strb	r3, [r7, #3]
	Uart1_config.transmission_complete_interrupt = 	DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	713b      	strb	r3, [r7, #4]
	Uart1_config.transmitter = 						ENABLE;
 80013aa:	2301      	movs	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
	Uart1_config.dma_transmitter = 					ENABLE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	737b      	strb	r3, [r7, #13]
	Uart1_config.dma_receiver = 					ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73bb      	strb	r3, [r7, #14]

	/* initiate the USART1 */
	USART1_voidInit(&Uart1_config);
 80013b6:	463b      	mov	r3, r7
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f8d9 	bl	8001570 <USART1_voidInit>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <get_str_length>:

u8 get_str_length(char* str){
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	u8 result = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
	while(*str != '\0'){
 80013d2:	e005      	b.n	80013e0 <get_str_length+0x1a>
		str++;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
		result++;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	3301      	adds	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
	while(*str != '\0'){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f5      	bne.n	80013d4 <get_str_length+0xe>
	}
	return result;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <dma_stream0_init>:


void dma_stream0_init(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af02      	add	r7, sp, #8

	/* create configurations instance for stream x */
	streamCofig_dtype stream7_config;

	stream7_config.dest_address 						= USART1_u32DataRegisterAddress();
 80013fe:	f000 f979 	bl	80016f4 <USART1_u32DataRegisterAddress>
 8001402:	4603      	mov	r3, r0
 8001404:	607b      	str	r3, [r7, #4]
	stream7_config.src_address 							= (u32)str1;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <dma_stream0_init+0xb8>)
 8001408:	603b      	str	r3, [r7, #0]
	stream7_config.circular_mode 						= DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	747b      	strb	r3, [r7, #17]
	stream7_config.channel_number 						= 4;
 800140e:	2304      	movs	r3, #4
 8001410:	72fb      	strb	r3, [r7, #11]
	stream7_config.burst.memory_beats 					= SINGLE_TRANSFER;
 8001412:	2300      	movs	r3, #0
 8001414:	737b      	strb	r3, [r7, #13]
	stream7_config.burst.peripheral_beats 				= SINGLE_TRANSFER;
 8001416:	2300      	movs	r3, #0
 8001418:	73bb      	strb	r3, [r7, #14]
	stream7_config.direct_mode 							= DIRECT_MODE_ENABLED;
 800141a:	2300      	movs	r3, #0
 800141c:	76fb      	strb	r3, [r7, #27]
	stream7_config.fifo_threshold 						= FULL;
 800141e:	2303      	movs	r3, #3
 8001420:	767b      	strb	r3, [r7, #25]
	stream7_config.flow_controller 						= DMA_FLOW_CONTROLLER;
 8001422:	2300      	movs	r3, #0
 8001424:	76bb      	strb	r3, [r7, #26]
	stream7_config.memory_ptr_mode 						= INCREMENT;
 8001426:	2301      	movs	r3, #1
 8001428:	74bb      	strb	r3, [r7, #18]
	stream7_config.peripheral_ptr_mode 					= FIXED;
 800142a:	2300      	movs	r3, #0
 800142c:	74fb      	strb	r3, [r7, #19]
	stream7_config.memory_size 							= ONE_BYTE;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
	stream7_config.peripheral_size 						= ONE_BYTE;
 8001432:	2300      	movs	r3, #0
 8001434:	743b      	strb	r3, [r7, #16]
	stream7_config.number_of_transactions 				= get_str_length(str1);
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <dma_stream0_init+0xb8>)
 8001438:	f7ff ffc5 	bl	80013c6 <get_str_length>
 800143c:	4603      	mov	r3, r0
 800143e:	b29b      	uxth	r3, r3
 8001440:	813b      	strh	r3, [r7, #8]
	stream7_config.stream_priority 						= VERY_HIGH_PRIORITY;
 8001442:	2303      	movs	r3, #3
 8001444:	733b      	strb	r3, [r7, #12]
	stream7_config.transfer_direction 					= MEMORY_TO_PERIPHERAL;
 8001446:	2301      	movs	r3, #1
 8001448:	72bb      	strb	r3, [r7, #10]
	stream7_config.transfer_error_interrupt_enable 		= DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	75bb      	strb	r3, [r7, #22]
	stream7_config.direct_mode_error_interrupt_enable 	= DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
	stream7_config.fifo_error_interrupt_enable 			= DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	763b      	strb	r3, [r7, #24]
	stream7_config.half_transfer_interrupt_enable 		= DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	757b      	strb	r3, [r7, #21]
	stream7_config.transfer_error_interrupt_enable		= DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	75bb      	strb	r3, [r7, #22]
	stream7_config.transfer_interrupt_enable 			= ENABLE;
 800145e:	2301      	movs	r3, #1
 8001460:	753b      	strb	r3, [r7, #20]

	DMA_voidInit(DMA2);
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <dma_stream0_init+0xbc>)
 8001464:	f7ff fb2e 	bl	8000ac4 <DMA_voidInit>
	ErrorStatus state = DMA_voidConfigureStream(DMA2, 7, &stream7_config);
 8001468:	463b      	mov	r3, r7
 800146a:	461a      	mov	r2, r3
 800146c:	2107      	movs	r1, #7
 800146e:	4811      	ldr	r0, [pc, #68]	; (80014b4 <dma_stream0_init+0xbc>)
 8001470:	f7ff fb48 	bl	8000b04 <DMA_voidConfigureStream>
 8001474:	4603      	mov	r3, r0
 8001476:	77fb      	strb	r3, [r7, #31]

	if(state == ERROR){
 8001478:	7ffb      	ldrb	r3, [r7, #31]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10c      	bne.n	8001498 <dma_stream0_init+0xa0>
		/* WRONG CONFIGURATIONS, rechoose the configurations */
		/* set a warning LED for debugging */
		GPIO_Init('B', P0, OUTPUT, PUSH_PULL, NO_PULLING);
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2300      	movs	r3, #0
 8001484:	2201      	movs	r2, #1
 8001486:	2100      	movs	r1, #0
 8001488:	2042      	movs	r0, #66	; 0x42
 800148a:	f7ff fdf3 	bl	8001074 <GPIO_Init>
		GPIO_WritePin('B', P0, HIGH);
 800148e:	2201      	movs	r2, #1
 8001490:	2100      	movs	r1, #0
 8001492:	2042      	movs	r0, #66	; 0x42
 8001494:	f7ff feae 	bl	80011f4 <GPIO_WritePin>
	}

	/* enable NVIC inturrupt for the stream */
	NVIC_voidEnableInterrupt(_DMA2_STREAM7_VECTOR_IRQ);
 8001498:	2046      	movs	r0, #70	; 0x46
 800149a:	f000 f815 	bl	80014c8 <NVIC_voidEnableInterrupt>

	/* start transfer operation in the stream */
	DMA_voidStartTransfer(DMA2, 7);
 800149e:	2107      	movs	r1, #7
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <dma_stream0_init+0xbc>)
 80014a2:	f7ff fdc7 	bl	8001034 <DMA_voidStartTransfer>
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000018 	.word	0x20000018
 80014b4:	40026400 	.word	0x40026400

080014b8 <main>:


int main(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	/* setup UART1 */
	init_uart1_comm();
 80014bc:	f7ff ff4d 	bl	800135a <init_uart1_comm>

	/* setup DMA2_STREAM2 and begin transmission */
	dma_stream0_init();
 80014c0:	f7ff ff9a 	bl	80013f8 <dma_stream0_init>

	while (1) {
 80014c4:	e7fe      	b.n	80014c4 <main+0xc>
	...

080014c8 <NVIC_voidEnableInterrupt>:
/****	Brief	:	enables the ext interrupt by the NVIC 				****/
/**** 	Return	:	None												****/
/****	param	:	bit number that corresponds to the ext peri			****/
/***************************************************************************/
void NVIC_voidEnableInterrupt(u8 copy_u8IntNumber)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[copy_u8IntNumber >> 5] = 1 << (copy_u8IntNumber & 0x001F);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2201      	movs	r2, #1
 80014da:	fa02 f103 	lsl.w	r1, r2, r3
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <NVIC_voidEnableInterrupt+0x30>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <RCC_initSystemClock>:
		}
	}
}


void RCC_initSystemClock(void){
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

	/* use FPU */
	SCB_CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <RCC_initSystemClock+0x60>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a15      	ldr	r2, [pc, #84]	; (800155c <RCC_initSystemClock+0x60>)
 8001506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150a:	6013      	str	r3, [r2, #0]

	/* set general RCC configurations */
	RCC_CFGR |= (AHB_APB1_DIV_FACTOR << 10) | (AHB_APB2_DIV_FACTOR << 13) | (SYSCLK_AHB_DIV_FACTOR << 4);
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <RCC_initSystemClock+0x64>)
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <RCC_initSystemClock+0x64>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6013      	str	r3, [r2, #0]

	RCC_CIR |= (LSI_INTERRUPT_ENABLE << 8)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <RCC_initSystemClock+0x68>)
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <RCC_initSystemClock+0x68>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_BDCR, 1)){}
#endif

#if SYSTEM_CLOCK_SRC == HSI_SRC
	/* set the trimming */
	RCC_CR |= TRIMMING_VALUE << 3;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <RCC_initSystemClock+0x6c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <RCC_initSystemClock+0x6c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6013      	str	r3, [r2, #0]

	/* enable HSI clock */
	SET_BIT(RCC_CR, 0);
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <RCC_initSystemClock+0x6c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <RCC_initSystemClock+0x6c>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_CR, 1)){}
 8001530:	bf00      	nop
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <RCC_initSystemClock+0x6c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f9      	beq.n	8001532 <RCC_initSystemClock+0x36>

	/* select HSI as system clock */
	RCC_CFGR &= ~0x03;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <RCC_initSystemClock+0x64>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <RCC_initSystemClock+0x64>)
 8001544:	f023 0303 	bic.w	r3, r3, #3
 8001548:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= HSI_SRC;
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <RCC_initSystemClock+0x64>)
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <RCC_initSystemClock+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6013      	str	r3, [r2, #0]
#endif

#if MCO2_PC9_OUTPUT_PIN == ENABLE
	RCC_CFGR |= (MCO2_SRC << 30) | (MCO2_SRC_PRESCALER << 27);
#endif
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed88 	.word	0xe000ed88
 8001560:	40023808 	.word	0x40023808
 8001564:	4002380c 	.word	0x4002380c
 8001568:	40023800 	.word	0x40023800
 800156c:	00000000 	.word	0x00000000

08001570 <USART1_voidInit>:

/************************************************************/
/*						FUNCTION DEFINITIONS				*/
/************************************************************/

void USART1_voidInit(uartConfig_dtype* config_ptr){
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	/* enable USART1 clock from the RCC */
	SET_BIT(RCC_APB2ENR, 4);
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <USART1_voidInit+0x170>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <USART1_voidInit+0x170>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6013      	str	r3, [r2, #0]

	USART1_CR1 = 0x0000;
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <USART1_voidInit+0x174>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
	/* enable the uart */
	SET_BIT(USART1_CR1, 13);
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <USART1_voidInit+0x174>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a55      	ldr	r2, [pc, #340]	; (80016e4 <USART1_voidInit+0x174>)
 8001590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001594:	6013      	str	r3, [r2, #0]

	/* setup the baud rate */
	float64 UASRTDIV = (float64)(16000000) / (BAUDRATE * 8 * (2 - config_ptr->over_eight));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	789b      	ldrb	r3, [r3, #2]
 800159a:	f1c3 0302 	rsb	r3, r3, #2
 800159e:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff68 	bl	800047c <__aeabi_i2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	a149      	add	r1, pc, #292	; (adr r1, 80016d8 <USART1_voidInit+0x168>)
 80015b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b6:	f7ff f8f5 	bl	80007a4 <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9c7 2304 	strd	r2, r3, [r7, #16]
	u8 fraction = ceil((UASRTDIV - floor(UASRTDIV)) * (8 * (2 - config_ptr->over_eight)));
 80015c2:	ed97 0b04 	vldr	d0, [r7, #16]
 80015c6:	f000 f973 	bl	80018b0 <floor>
 80015ca:	ec53 2b10 	vmov	r2, r3, d0
 80015ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d2:	f7fe fe05 	bl	80001e0 <__aeabi_dsub>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	461d      	mov	r5, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	789b      	ldrb	r3, [r3, #2]
 80015e2:	f1c3 0302 	rsb	r3, r3, #2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff47 	bl	800047c <__aeabi_i2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe ffab 	bl	8000550 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	ec43 2b17 	vmov	d7, r2, r3
 8001602:	eeb0 0a47 	vmov.f32	s0, s14
 8001606:	eef0 0a67 	vmov.f32	s1, s15
 800160a:	f000 f8cd 	bl	80017a8 <ceil>
 800160e:	ec53 2b10 	vmov	r2, r3, d0
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fa35 	bl	8000a84 <__aeabi_d2uiz>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
	u16 mantissa =  UASRTDIV;
 800161e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001622:	f7ff fa2f 	bl	8000a84 <__aeabi_d2uiz>
 8001626:	4603      	mov	r3, r0
 8001628:	81bb      	strh	r3, [r7, #12]
	USART1_BRR = fraction | (mantissa << 4);
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	431a      	orrs	r2, r3
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <USART1_voidInit+0x178>)
 8001634:	601a      	str	r2, [r3, #0]

	USART1_CR2 = (config_ptr->stopBit << 12) | (config_ptr->clock_synch << 11)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7a9b      	ldrb	r3, [r3, #10]
 800163a:	031a      	lsls	r2, r3, #12
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7a5b      	ldrb	r3, [r3, #9]
 8001640:	02db      	lsls	r3, r3, #11
 8001642:	431a      	orrs	r2, r3
			| (config_ptr->clock_polarity << 10) | (config_ptr->clock_phase << 9);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7adb      	ldrb	r3, [r3, #11]
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	025b      	lsls	r3, r3, #9
 8001652:	431a      	orrs	r2, r3
	USART1_CR2 = (config_ptr->stopBit << 12) | (config_ptr->clock_synch << 11)
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <USART1_voidInit+0x17c>)
 8001656:	601a      	str	r2, [r3, #0]

	USART1_CR1 |= (config_ptr->over_eight << 15) | (config_ptr->word_length << 12)
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <USART1_voidInit+0x174>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	7892      	ldrb	r2, [r2, #2]
 8001660:	03d1      	lsls	r1, r2, #15
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	78d2      	ldrb	r2, [r2, #3]
 8001666:	0312      	lsls	r2, r2, #12
 8001668:	4311      	orrs	r1, r2
			| (config_ptr->parity.enable << 10) | (config_ptr->parity.type << 9) | (config_ptr->parity_error_interrupt << 8)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	0292      	lsls	r2, r2, #10
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	7852      	ldrb	r2, [r2, #1]
 8001676:	0252      	lsls	r2, r2, #9
 8001678:	4311      	orrs	r1, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	7992      	ldrb	r2, [r2, #6]
 800167e:	0212      	lsls	r2, r2, #8
 8001680:	4311      	orrs	r1, r2
			| (config_ptr->transmission_complete_interrupt << 6) | (config_ptr->receive_complete_interrupt << 5)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	7912      	ldrb	r2, [r2, #4]
 8001686:	0192      	lsls	r2, r2, #6
 8001688:	4311      	orrs	r1, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	7952      	ldrb	r2, [r2, #5]
 800168e:	0152      	lsls	r2, r2, #5
 8001690:	4311      	orrs	r1, r2
			| (config_ptr->receiver << 2);
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	7a12      	ldrb	r2, [r2, #8]
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	430a      	orrs	r2, r1
 800169a:	4611      	mov	r1, r2
	USART1_CR1 |= (config_ptr->over_eight << 15) | (config_ptr->word_length << 12)
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <USART1_voidInit+0x174>)
 800169e:	430b      	orrs	r3, r1
 80016a0:	6013      	str	r3, [r2, #0]
	USART1_CR3 |= (config_ptr->dma_transmitter << 7) | (config_ptr->dma_receiver << 6);
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <USART1_voidInit+0x180>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	7b52      	ldrb	r2, [r2, #13]
 80016aa:	01d1      	lsls	r1, r2, #7
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	7b92      	ldrb	r2, [r2, #14]
 80016b0:	0192      	lsls	r2, r2, #6
 80016b2:	430a      	orrs	r2, r1
 80016b4:	4611      	mov	r1, r2
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <USART1_voidInit+0x180>)
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6013      	str	r3, [r2, #0]
	USART1_CR1 |= (config_ptr->transmitter << 3);
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <USART1_voidInit+0x174>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	79d2      	ldrb	r2, [r2, #7]
 80016c4:	00d2      	lsls	r2, r2, #3
 80016c6:	4611      	mov	r1, r2
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <USART1_voidInit+0x174>)
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdb0      	pop	{r4, r5, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	00000000 	.word	0x00000000
 80016dc:	416e8480 	.word	0x416e8480
 80016e0:	40023844 	.word	0x40023844
 80016e4:	4001100c 	.word	0x4001100c
 80016e8:	40011008 	.word	0x40011008
 80016ec:	40011010 	.word	0x40011010
 80016f0:	40011014 	.word	0x40011014

080016f4 <USART1_u32DataRegisterAddress>:
		str++;
	}
	USART1_voidTransmitCharacter('\0');
}

u32 USART1_u32DataRegisterAddress(void){
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	return (u32)&USART1_DR;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <USART1_u32DataRegisterAddress+0x10>)
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40011004 	.word	0x40011004

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800170e:	490e      	ldr	r1, [pc, #56]	; (8001748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001724:	4c0b      	ldr	r4, [pc, #44]	; (8001754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  RCC_initSystemClock
 8001732:	f7ff fee3 	bl	80014fc <RCC_initSystemClock>
/* Call static constructors */
    bl __libc_init_array
 8001736:	f000 f811 	bl	800175c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7ff febd 	bl	80014b8 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800174c:	080019d0 	.word	0x080019d0
  ldr r2, =_sbss
 8001750:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001754:	20000098 	.word	0x20000098

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <__libc_init_array>:
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	4d0d      	ldr	r5, [pc, #52]	; (8001794 <__libc_init_array+0x38>)
 8001760:	4c0d      	ldr	r4, [pc, #52]	; (8001798 <__libc_init_array+0x3c>)
 8001762:	1b64      	subs	r4, r4, r5
 8001764:	10a4      	asrs	r4, r4, #2
 8001766:	2600      	movs	r6, #0
 8001768:	42a6      	cmp	r6, r4
 800176a:	d109      	bne.n	8001780 <__libc_init_array+0x24>
 800176c:	4d0b      	ldr	r5, [pc, #44]	; (800179c <__libc_init_array+0x40>)
 800176e:	4c0c      	ldr	r4, [pc, #48]	; (80017a0 <__libc_init_array+0x44>)
 8001770:	f000 f91e 	bl	80019b0 <_init>
 8001774:	1b64      	subs	r4, r4, r5
 8001776:	10a4      	asrs	r4, r4, #2
 8001778:	2600      	movs	r6, #0
 800177a:	42a6      	cmp	r6, r4
 800177c:	d105      	bne.n	800178a <__libc_init_array+0x2e>
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	f855 3b04 	ldr.w	r3, [r5], #4
 8001784:	4798      	blx	r3
 8001786:	3601      	adds	r6, #1
 8001788:	e7ee      	b.n	8001768 <__libc_init_array+0xc>
 800178a:	f855 3b04 	ldr.w	r3, [r5], #4
 800178e:	4798      	blx	r3
 8001790:	3601      	adds	r6, #1
 8001792:	e7f2      	b.n	800177a <__libc_init_array+0x1e>
 8001794:	080019c8 	.word	0x080019c8
 8001798:	080019c8 	.word	0x080019c8
 800179c:	080019c8 	.word	0x080019c8
 80017a0:	080019cc 	.word	0x080019cc
 80017a4:	00000000 	.word	0x00000000

080017a8 <ceil>:
 80017a8:	ec51 0b10 	vmov	r0, r1, d0
 80017ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80017b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80017b8:	2e13      	cmp	r6, #19
 80017ba:	ee10 5a10 	vmov	r5, s0
 80017be:	ee10 8a10 	vmov	r8, s0
 80017c2:	460c      	mov	r4, r1
 80017c4:	dc30      	bgt.n	8001828 <ceil+0x80>
 80017c6:	2e00      	cmp	r6, #0
 80017c8:	da12      	bge.n	80017f0 <ceil+0x48>
 80017ca:	a335      	add	r3, pc, #212	; (adr r3, 80018a0 <ceil+0xf8>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe fd08 	bl	80001e4 <__adddf3>
 80017d4:	2200      	movs	r2, #0
 80017d6:	2300      	movs	r3, #0
 80017d8:	f7ff f94a 	bl	8000a70 <__aeabi_dcmpgt>
 80017dc:	b128      	cbz	r0, 80017ea <ceil+0x42>
 80017de:	2c00      	cmp	r4, #0
 80017e0:	db55      	blt.n	800188e <ceil+0xe6>
 80017e2:	432c      	orrs	r4, r5
 80017e4:	d057      	beq.n	8001896 <ceil+0xee>
 80017e6:	4c30      	ldr	r4, [pc, #192]	; (80018a8 <ceil+0x100>)
 80017e8:	2500      	movs	r5, #0
 80017ea:	4621      	mov	r1, r4
 80017ec:	4628      	mov	r0, r5
 80017ee:	e025      	b.n	800183c <ceil+0x94>
 80017f0:	4f2e      	ldr	r7, [pc, #184]	; (80018ac <ceil+0x104>)
 80017f2:	4137      	asrs	r7, r6
 80017f4:	ea01 0307 	and.w	r3, r1, r7
 80017f8:	4303      	orrs	r3, r0
 80017fa:	d01f      	beq.n	800183c <ceil+0x94>
 80017fc:	a328      	add	r3, pc, #160	; (adr r3, 80018a0 <ceil+0xf8>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fcef 	bl	80001e4 <__adddf3>
 8001806:	2200      	movs	r2, #0
 8001808:	2300      	movs	r3, #0
 800180a:	f7ff f931 	bl	8000a70 <__aeabi_dcmpgt>
 800180e:	2800      	cmp	r0, #0
 8001810:	d0eb      	beq.n	80017ea <ceil+0x42>
 8001812:	2c00      	cmp	r4, #0
 8001814:	bfc2      	ittt	gt
 8001816:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800181a:	fa43 f606 	asrgt.w	r6, r3, r6
 800181e:	19a4      	addgt	r4, r4, r6
 8001820:	ea24 0407 	bic.w	r4, r4, r7
 8001824:	2500      	movs	r5, #0
 8001826:	e7e0      	b.n	80017ea <ceil+0x42>
 8001828:	2e33      	cmp	r6, #51	; 0x33
 800182a:	dd0b      	ble.n	8001844 <ceil+0x9c>
 800182c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001830:	d104      	bne.n	800183c <ceil+0x94>
 8001832:	ee10 2a10 	vmov	r2, s0
 8001836:	460b      	mov	r3, r1
 8001838:	f7fe fcd4 	bl	80001e4 <__adddf3>
 800183c:	ec41 0b10 	vmov	d0, r0, r1
 8001840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001844:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	fa23 f707 	lsr.w	r7, r3, r7
 8001850:	4207      	tst	r7, r0
 8001852:	d0f3      	beq.n	800183c <ceil+0x94>
 8001854:	a312      	add	r3, pc, #72	; (adr r3, 80018a0 <ceil+0xf8>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fcc3 	bl	80001e4 <__adddf3>
 800185e:	2200      	movs	r2, #0
 8001860:	2300      	movs	r3, #0
 8001862:	f7ff f905 	bl	8000a70 <__aeabi_dcmpgt>
 8001866:	2800      	cmp	r0, #0
 8001868:	d0bf      	beq.n	80017ea <ceil+0x42>
 800186a:	2c00      	cmp	r4, #0
 800186c:	dd02      	ble.n	8001874 <ceil+0xcc>
 800186e:	2e14      	cmp	r6, #20
 8001870:	d103      	bne.n	800187a <ceil+0xd2>
 8001872:	3401      	adds	r4, #1
 8001874:	ea25 0507 	bic.w	r5, r5, r7
 8001878:	e7b7      	b.n	80017ea <ceil+0x42>
 800187a:	2301      	movs	r3, #1
 800187c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8001880:	fa03 f606 	lsl.w	r6, r3, r6
 8001884:	4435      	add	r5, r6
 8001886:	4545      	cmp	r5, r8
 8001888:	bf38      	it	cc
 800188a:	18e4      	addcc	r4, r4, r3
 800188c:	e7f2      	b.n	8001874 <ceil+0xcc>
 800188e:	2500      	movs	r5, #0
 8001890:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8001894:	e7a9      	b.n	80017ea <ceil+0x42>
 8001896:	4625      	mov	r5, r4
 8001898:	e7a7      	b.n	80017ea <ceil+0x42>
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	8800759c 	.word	0x8800759c
 80018a4:	7e37e43c 	.word	0x7e37e43c
 80018a8:	3ff00000 	.word	0x3ff00000
 80018ac:	000fffff 	.word	0x000fffff

080018b0 <floor>:
 80018b0:	ec51 0b10 	vmov	r0, r1, d0
 80018b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80018bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80018c0:	2e13      	cmp	r6, #19
 80018c2:	ee10 5a10 	vmov	r5, s0
 80018c6:	ee10 8a10 	vmov	r8, s0
 80018ca:	460c      	mov	r4, r1
 80018cc:	dc32      	bgt.n	8001934 <floor+0x84>
 80018ce:	2e00      	cmp	r6, #0
 80018d0:	da14      	bge.n	80018fc <floor+0x4c>
 80018d2:	a333      	add	r3, pc, #204	; (adr r3, 80019a0 <floor+0xf0>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fc84 	bl	80001e4 <__adddf3>
 80018dc:	2200      	movs	r2, #0
 80018de:	2300      	movs	r3, #0
 80018e0:	f7ff f8c6 	bl	8000a70 <__aeabi_dcmpgt>
 80018e4:	b138      	cbz	r0, 80018f6 <floor+0x46>
 80018e6:	2c00      	cmp	r4, #0
 80018e8:	da57      	bge.n	800199a <floor+0xea>
 80018ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80018ee:	431d      	orrs	r5, r3
 80018f0:	d001      	beq.n	80018f6 <floor+0x46>
 80018f2:	4c2d      	ldr	r4, [pc, #180]	; (80019a8 <floor+0xf8>)
 80018f4:	2500      	movs	r5, #0
 80018f6:	4621      	mov	r1, r4
 80018f8:	4628      	mov	r0, r5
 80018fa:	e025      	b.n	8001948 <floor+0x98>
 80018fc:	4f2b      	ldr	r7, [pc, #172]	; (80019ac <floor+0xfc>)
 80018fe:	4137      	asrs	r7, r6
 8001900:	ea01 0307 	and.w	r3, r1, r7
 8001904:	4303      	orrs	r3, r0
 8001906:	d01f      	beq.n	8001948 <floor+0x98>
 8001908:	a325      	add	r3, pc, #148	; (adr r3, 80019a0 <floor+0xf0>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fc69 	bl	80001e4 <__adddf3>
 8001912:	2200      	movs	r2, #0
 8001914:	2300      	movs	r3, #0
 8001916:	f7ff f8ab 	bl	8000a70 <__aeabi_dcmpgt>
 800191a:	2800      	cmp	r0, #0
 800191c:	d0eb      	beq.n	80018f6 <floor+0x46>
 800191e:	2c00      	cmp	r4, #0
 8001920:	bfbe      	ittt	lt
 8001922:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8001926:	fa43 f606 	asrlt.w	r6, r3, r6
 800192a:	19a4      	addlt	r4, r4, r6
 800192c:	ea24 0407 	bic.w	r4, r4, r7
 8001930:	2500      	movs	r5, #0
 8001932:	e7e0      	b.n	80018f6 <floor+0x46>
 8001934:	2e33      	cmp	r6, #51	; 0x33
 8001936:	dd0b      	ble.n	8001950 <floor+0xa0>
 8001938:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800193c:	d104      	bne.n	8001948 <floor+0x98>
 800193e:	ee10 2a10 	vmov	r2, s0
 8001942:	460b      	mov	r3, r1
 8001944:	f7fe fc4e 	bl	80001e4 <__adddf3>
 8001948:	ec41 0b10 	vmov	d0, r0, r1
 800194c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001950:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	fa23 f707 	lsr.w	r7, r3, r7
 800195c:	4207      	tst	r7, r0
 800195e:	d0f3      	beq.n	8001948 <floor+0x98>
 8001960:	a30f      	add	r3, pc, #60	; (adr r3, 80019a0 <floor+0xf0>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fc3d 	bl	80001e4 <__adddf3>
 800196a:	2200      	movs	r2, #0
 800196c:	2300      	movs	r3, #0
 800196e:	f7ff f87f 	bl	8000a70 <__aeabi_dcmpgt>
 8001972:	2800      	cmp	r0, #0
 8001974:	d0bf      	beq.n	80018f6 <floor+0x46>
 8001976:	2c00      	cmp	r4, #0
 8001978:	da02      	bge.n	8001980 <floor+0xd0>
 800197a:	2e14      	cmp	r6, #20
 800197c:	d103      	bne.n	8001986 <floor+0xd6>
 800197e:	3401      	adds	r4, #1
 8001980:	ea25 0507 	bic.w	r5, r5, r7
 8001984:	e7b7      	b.n	80018f6 <floor+0x46>
 8001986:	2301      	movs	r3, #1
 8001988:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800198c:	fa03 f606 	lsl.w	r6, r3, r6
 8001990:	4435      	add	r5, r6
 8001992:	4545      	cmp	r5, r8
 8001994:	bf38      	it	cc
 8001996:	18e4      	addcc	r4, r4, r3
 8001998:	e7f2      	b.n	8001980 <floor+0xd0>
 800199a:	2500      	movs	r5, #0
 800199c:	462c      	mov	r4, r5
 800199e:	e7aa      	b.n	80018f6 <floor+0x46>
 80019a0:	8800759c 	.word	0x8800759c
 80019a4:	7e37e43c 	.word	0x7e37e43c
 80019a8:	bff00000 	.word	0xbff00000
 80019ac:	000fffff 	.word	0x000fffff

080019b0 <_init>:
 80019b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b2:	bf00      	nop
 80019b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b6:	bc08      	pop	{r3}
 80019b8:	469e      	mov	lr, r3
 80019ba:	4770      	bx	lr

080019bc <_fini>:
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	bf00      	nop
 80019c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c2:	bc08      	pop	{r3}
 80019c4:	469e      	mov	lr, r3
 80019c6:	4770      	bx	lr
