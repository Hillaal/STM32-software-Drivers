
timers-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000790  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000924  08000924  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000924  08000924  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08000924  08000924  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000924  08000924  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000924  08000924  00010924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000928  08000928  00010928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800092c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000030  0800095c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  0800095c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bc1  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d0  00000000  00000000  00020c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000210f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00021280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000322  00000000  00000000  000213b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000916  00000000  00000000  000216d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004987  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002696f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000498  00000000  00000000  000269c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800090c 	.word	0x0800090c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000034 	.word	0x20000034
 80001d0:	0800090c 	.word	0x0800090c

080001d4 <GPIO_Init>:
#include "gpio.h"



void GPIO_Init( char port_id, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State, unsigned char Pulling_State)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60b9      	str	r1, [r7, #8]
 80001dc:	607a      	str	r2, [r7, #4]
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	4603      	mov	r3, r0
 80001e2:	73fb      	strb	r3, [r7, #15]
	port_id -= 'A';
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
 80001e6:	3b41      	subs	r3, #65	; 0x41
 80001e8:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	RCC_AHB1ENR |= (0x01 <<port_id);
 80001ea:	4b58      	ldr	r3, [pc, #352]	; (800034c <GPIO_Init+0x178>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	7bfa      	ldrb	r2, [r7, #15]
 80001f0:	2101      	movs	r1, #1
 80001f2:	fa01 f202 	lsl.w	r2, r1, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a54      	ldr	r2, [pc, #336]	; (800034c <GPIO_Init+0x178>)
 80001fa:	430b      	orrs	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b03      	cmp	r3, #3
 8000202:	d854      	bhi.n	80002ae <GPIO_Init+0xda>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <GPIO_Init+0x38>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	0800021d 	.word	0x0800021d
 8000210:	08000243 	.word	0x08000243
 8000214:	08000267 	.word	0x08000267
 8000218:	0800028b 	.word	0x0800028b
	//configure moder register for pin direction
	switch(PIN_Dir)
	{
		case (INPUT):
				GPIO_MODER(port_id) &= ~(0x03 << 2*PIN_NO);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4a4c      	ldr	r2, [pc, #304]	; (8000350 <GPIO_Init+0x17c>)
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	0052      	lsls	r2, r2, #1
 800022a:	2103      	movs	r1, #3
 800022c:	fa01 f202 	lsl.w	r2, r1, r2
 8000230:	43d2      	mvns	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	7bfa      	ldrb	r2, [r7, #15]
 8000236:	4946      	ldr	r1, [pc, #280]	; (8000350 <GPIO_Init+0x17c>)
 8000238:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800023c:	4003      	ands	r3, r0
 800023e:	6013      	str	r3, [r2, #0]
		break;
 8000240:	e035      	b.n	80002ae <GPIO_Init+0xda>
		case (OUTPUT):
				GPIO_MODER(port_id) |= (0x01 << 2*PIN_NO);
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4a42      	ldr	r2, [pc, #264]	; (8000350 <GPIO_Init+0x17c>)
 8000246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	68ba      	ldr	r2, [r7, #8]
 800024e:	0052      	lsls	r2, r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	4610      	mov	r0, r2
 8000258:	7bfa      	ldrb	r2, [r7, #15]
 800025a:	493d      	ldr	r1, [pc, #244]	; (8000350 <GPIO_Init+0x17c>)
 800025c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000260:	4303      	orrs	r3, r0
 8000262:	6013      	str	r3, [r2, #0]
		break;
 8000264:	e023      	b.n	80002ae <GPIO_Init+0xda>
		case (ALTERNATE_FUN):
				GPIO_MODER(port_id) |= (0x02 << 2*PIN_NO);
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	4a39      	ldr	r2, [pc, #228]	; (8000350 <GPIO_Init+0x17c>)
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	2102      	movs	r1, #2
 8000276:	fa01 f202 	lsl.w	r2, r1, r2
 800027a:	4610      	mov	r0, r2
 800027c:	7bfa      	ldrb	r2, [r7, #15]
 800027e:	4934      	ldr	r1, [pc, #208]	; (8000350 <GPIO_Init+0x17c>)
 8000280:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000284:	4303      	orrs	r3, r0
 8000286:	6013      	str	r3, [r2, #0]
		break;
 8000288:	e011      	b.n	80002ae <GPIO_Init+0xda>
		case (ANALOG):
				GPIO_MODER(port_id) |= (0x03 << 2*PIN_NO);
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	4a30      	ldr	r2, [pc, #192]	; (8000350 <GPIO_Init+0x17c>)
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	68ba      	ldr	r2, [r7, #8]
 8000296:	0052      	lsls	r2, r2, #1
 8000298:	2103      	movs	r1, #3
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	492b      	ldr	r1, [pc, #172]	; (8000350 <GPIO_Init+0x17c>)
 80002a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002a8:	4303      	orrs	r3, r0
 80002aa:	6013      	str	r3, [r2, #0]
		break;
 80002ac:	bf00      	nop
	}// end switch
	//configure default state
	switch(Default_State)
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <GPIO_Init+0xe8>
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d014      	beq.n	80002e4 <GPIO_Init+0x110>
 80002ba:	e026      	b.n	800030a <GPIO_Init+0x136>
	{
		case(PUSH_PULL):
				GPIO_OTYPER(port_id) &= ~(0x01<<PIN_NO);
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	4a24      	ldr	r2, [pc, #144]	; (8000350 <GPIO_Init+0x17c>)
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	3304      	adds	r3, #4
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2101      	movs	r1, #1
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	4610      	mov	r0, r2
 80002d4:	7bfa      	ldrb	r2, [r7, #15]
 80002d6:	491e      	ldr	r1, [pc, #120]	; (8000350 <GPIO_Init+0x17c>)
 80002d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002dc:	3204      	adds	r2, #4
 80002de:	4003      	ands	r3, r0
 80002e0:	6013      	str	r3, [r2, #0]
		break;
 80002e2:	e012      	b.n	800030a <GPIO_Init+0x136>
		case(OPEN_DRAIN):
				GPIO_OTYPER(port_id) |= (0x01<<PIN_NO);
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <GPIO_Init+0x17c>)
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	3304      	adds	r3, #4
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2101      	movs	r1, #1
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	fa01 f202 	lsl.w	r2, r1, r2
 80002f8:	4610      	mov	r0, r2
 80002fa:	7bfa      	ldrb	r2, [r7, #15]
 80002fc:	4914      	ldr	r1, [pc, #80]	; (8000350 <GPIO_Init+0x17c>)
 80002fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000302:	3204      	adds	r2, #4
 8000304:	4303      	orrs	r3, r0
 8000306:	6013      	str	r3, [r2, #0]
		break;
 8000308:	bf00      	nop
	}//end switch

	GPIO_PUPDR(port_id) = (GPIO_PUPDR(port_id) & ~(0x3 << 2 * PIN_NO)) | (Pulling_State << 2 * PIN_NO);
 800030a:	7bfb      	ldrb	r3, [r7, #15]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <GPIO_Init+0x17c>)
 800030e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000312:	330c      	adds	r3, #12
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68ba      	ldr	r2, [r7, #8]
 8000318:	0052      	lsls	r2, r2, #1
 800031a:	2103      	movs	r1, #3
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	43d2      	mvns	r2, r2
 8000322:	4013      	ands	r3, r2
 8000324:	7e39      	ldrb	r1, [r7, #24]
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	4610      	mov	r0, r2
 8000330:	7bfa      	ldrb	r2, [r7, #15]
 8000332:	4907      	ldr	r1, [pc, #28]	; (8000350 <GPIO_Init+0x17c>)
 8000334:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000338:	320c      	adds	r2, #12
 800033a:	4303      	orrs	r3, r0
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40023830 	.word	0x40023830
 8000350:	20000000 	.word	0x20000000

08000354 <GPIO_TogglePin>:
	}
	return result;
}

unsigned char GPIO_TogglePin(char port_id, unsigned int PIN_NO)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]
	port_id -= 'A';
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	3b41      	subs	r3, #65	; 0x41
 8000364:	71fb      	strb	r3, [r7, #7]
	unsigned char result;
	if((GPIO_MODER(port_id) & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <GPIO_TogglePin+0x70>)
 800036a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	683a      	ldr	r2, [r7, #0]
 8000372:	0052      	lsls	r2, r2, #1
 8000374:	2103      	movs	r1, #3
 8000376:	fa01 f202 	lsl.w	r2, r1, r2
 800037a:	401a      	ands	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	fa22 f303 	lsr.w	r3, r2, r3
 8000384:	2b01      	cmp	r3, #1
 8000386:	d114      	bne.n	80003b2 <GPIO_TogglePin+0x5e>
	{

		GPIO_ODR(port_id) ^= (1<<PIN_NO);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <GPIO_TogglePin+0x70>)
 800038c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000390:	3314      	adds	r3, #20
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2101      	movs	r1, #1
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	4610      	mov	r0, r2
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	4908      	ldr	r1, [pc, #32]	; (80003c4 <GPIO_TogglePin+0x70>)
 80003a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003a6:	3214      	adds	r2, #20
 80003a8:	4043      	eors	r3, r0
 80003aa:	6013      	str	r3, [r2, #0]
		result = OK;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73fb      	strb	r3, [r7, #15]
 80003b0:	e001      	b.n	80003b6 <GPIO_TogglePin+0x62>
	}
	else
	{
		result = NOK;
 80003b2:	2301      	movs	r3, #1
 80003b4:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	20000000 	.word	0x20000000

080003c8 <TIM_voidInit>:
 *			system clock is not set (default is HSI = 16 MHZ)
 *			No prescaler for the CLK_INT provided for the timer (thus, counter runs on 16 MHZ)
 *
 *
 */
void TIM_voidInit(Gptim2_5_dtype* timer, u8 counting_direction, u32 initial_cnt_value){
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	460b      	mov	r3, r1
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	72fb      	strb	r3, [r7, #11]
	/* enable the Update event generation */
	CLR_BIT(timer->CR1, 1);
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f023 0202 	bic.w	r2, r3, #2
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	601a      	str	r2, [r3, #0]
	/* restrict the Update event generation to counter overflow/underflow events */
	SET_BIT(timer->CR1, 2);
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f043 0204 	orr.w	r2, r3, #4
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	601a      	str	r2, [r3, #0]
	/* enable the auto-reload preload (buffering) */
	SET_BIT(timer->CR1, 7);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	601a      	str	r2, [r3, #0]
	/* set the counting direction */
	SET_VALUE(timer->CR1, 4, counting_direction);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f023 0210 	bic.w	r2, r3, #16
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	7afa      	ldrb	r2, [r7, #11]
 800040c:	0112      	lsls	r2, r2, #4
 800040e:	431a      	orrs	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	601a      	str	r2, [r3, #0]
	/* enable the Update event interrupt request */
	SET_BIT(timer->DIER, 0);
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	f043 0201 	orr.w	r2, r3, #1
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	60da      	str	r2, [r3, #12]

	/* init the counting register with the initial value */
	timer->CNT = initial_cnt_value;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
	/* set the Auto-reload value to the same value */
	timer->ARR = initial_cnt_value;
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <TIM_voidStartTimer>:

void TIM_voidStartTimer(Gptim2_5_dtype* timer){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	SET_BIT(timer->CR1, 0);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f043 0201 	orr.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	601a      	str	r2, [r3, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <TIM_voidClearInterruptFlag>:
void TIM_voidSoftwareInterrupt(Gptim2_5_dtype* timer, timerFlags_dtype flag){
	/* activate the selected interrupt request by software */
	timer->EGR |= (1 << flag);
}

void TIM_voidClearInterruptFlag(Gptim2_5_dtype* timer, timerFlags_dtype flag){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	/* clear the Update interrupt flag */
	CLR_BIT(timer->SR, flag);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	78fa      	ldrb	r2, [r7, #3]
 800046a:	2101      	movs	r1, #1
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	43d2      	mvns	r2, r2
 8000472:	401a      	ands	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	611a      	str	r2, [r3, #16]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <TIM_voidSetCallBackFunction>:
u8	 TIM_u8GetFlagStatus(Gptim2_5_dtype* timer, timerFlags_dtype flag){
	return timer->SR & (1 << flag);
}


void TIM_voidSetCallBackFunction(Gptim2_5_dtype* timer, void (*function_address)(void)){
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
	/* assign the function address to the callback function pointer specific for selected timer */
	u32 timer_id = (timer - TIM2) / 0x400;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000494:	111b      	asrs	r3, r3, #4
 8000496:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <TIM_voidSetCallBackFunction+0x6c>)
 8000498:	fb02 f303 	mul.w	r3, r2, r3
 800049c:	2b00      	cmp	r3, #0
 800049e:	da01      	bge.n	80004a4 <TIM_voidSetCallBackFunction+0x20>
 80004a0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80004a4:	129b      	asrs	r3, r3, #10
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	d81a      	bhi.n	80004e4 <TIM_voidSetCallBackFunction+0x60>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <TIM_voidSetCallBackFunction+0x30>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	080004c5 	.word	0x080004c5
 80004b8:	080004cd 	.word	0x080004cd
 80004bc:	080004d5 	.word	0x080004d5
 80004c0:	080004dd 	.word	0x080004dd
	switch(timer_id){
	case 0:
		tim2callbackfunction = function_address;
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <TIM_voidSetCallBackFunction+0x70>)
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	6013      	str	r3, [r2, #0]
		break;
 80004ca:	e00b      	b.n	80004e4 <TIM_voidSetCallBackFunction+0x60>
	case 1:
		tim3callbackfunction = function_address;
 80004cc:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <TIM_voidSetCallBackFunction+0x74>)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	6013      	str	r3, [r2, #0]
		break;
 80004d2:	e007      	b.n	80004e4 <TIM_voidSetCallBackFunction+0x60>
	case 2:
		tim4callbackfunction = function_address;
 80004d4:	4a09      	ldr	r2, [pc, #36]	; (80004fc <TIM_voidSetCallBackFunction+0x78>)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	6013      	str	r3, [r2, #0]
		break;
 80004da:	e003      	b.n	80004e4 <TIM_voidSetCallBackFunction+0x60>
	case 3:
		tim5callbackfunction = function_address;
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <TIM_voidSetCallBackFunction+0x7c>)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	6013      	str	r3, [r2, #0]
		break;
 80004e2:	bf00      	nop
	}
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	cccccccd 	.word	0xcccccccd
 80004f4:	2000004c 	.word	0x2000004c
 80004f8:	20000050 	.word	0x20000050
 80004fc:	20000054 	.word	0x20000054
 8000500:	20000058 	.word	0x20000058

08000504 <TIM2_IRQHandler>:

/******************************************************************************/
/**************************INTERRUPT SERVICE ROUTINES**************************/
/******************************************************************************/

void TIM2_IRQHandler(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	/* clear the flags for the future interrupts */
	TIM_voidClearInterruptFlag(TIM2, UPDATE_INTERRUPT);
 8000508:	2100      	movs	r1, #0
 800050a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800050e:	f7ff ffa3 	bl	8000458 <TIM_voidClearInterruptFlag>
	/* execute the callback function */
	tim2callbackfunction();
 8000512:	4b02      	ldr	r3, [pc, #8]	; (800051c <TIM2_IRQHandler+0x18>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4798      	blx	r3
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000004c 	.word	0x2000004c

08000520 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* clear the flags for the future interrupts */
	TIM_voidClearInterruptFlag(TIM3, UPDATE_INTERRUPT);
 8000524:	2100      	movs	r1, #0
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <TIM3_IRQHandler+0x18>)
 8000528:	f7ff ff96 	bl	8000458 <TIM_voidClearInterruptFlag>
	/* execute the callback function */
	tim3callbackfunction();
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <TIM3_IRQHandler+0x1c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40000400 	.word	0x40000400
 800053c:	20000050 	.word	0x20000050

08000540 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/* clear the flags for the future interrupts */
	TIM_voidClearInterruptFlag(TIM4, UPDATE_INTERRUPT);
 8000544:	2100      	movs	r1, #0
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <TIM4_IRQHandler+0x18>)
 8000548:	f7ff ff86 	bl	8000458 <TIM_voidClearInterruptFlag>
	/* execute the callback function */
	tim4callbackfunction();
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <TIM4_IRQHandler+0x1c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4798      	blx	r3
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40000800 	.word	0x40000800
 800055c:	20000054 	.word	0x20000054

08000560 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	/* clear the flags for the future interrupts */
	TIM_voidClearInterruptFlag(TIM5, UPDATE_INTERRUPT);
 8000564:	2100      	movs	r1, #0
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <TIM5_IRQHandler+0x18>)
 8000568:	f7ff ff76 	bl	8000458 <TIM_voidClearInterruptFlag>
	/* execute the callback function */
	tim5callbackfunction();
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <TIM5_IRQHandler+0x1c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4798      	blx	r3
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40000c00 	.word	0x40000c00
 800057c:	20000058 	.word	0x20000058

08000580 <APP_toggleLedTaskSetup>:
/*********** Date		: 13/3/2022				*************/
/*********** Version	: V01					*************/
/************************************************************/
#include "main.h"

void APP_toggleLedTaskSetup(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* enable TIM clock */
	RCC_voidEnableClock(RCC_APB1, _TIM2_RCC_ID);
 8000584:	2100      	movs	r1, #0
 8000586:	2002      	movs	r0, #2
 8000588:	f000 f852 	bl	8000630 <RCC_voidEnableClock>
	/* setup the TIM2 configs */
	TIM_voidInit(TIM2, DOWNCOUNTING, RCC_u32GetSystemClock());
 800058c:	f000 f966 	bl	800085c <RCC_u32GetSystemClock>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	2101      	movs	r1, #1
 8000596:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800059a:	f7ff ff15 	bl	80003c8 <TIM_voidInit>
	/* enable TIM2 NVIC interrupt */
	NVIC_voidEnableInterrupt(_TIM2_VECTOR_IRQ);
 800059e:	201c      	movs	r0, #28
 80005a0:	f000 f82c 	bl	80005fc <NVIC_voidEnableInterrupt>
	/* set the callback function that will be called inside the interrupt */
	TIM_voidSetCallBackFunction(TIM2, APP_toggleLed);
 80005a4:	4905      	ldr	r1, [pc, #20]	; (80005bc <APP_toggleLedTaskSetup+0x3c>)
 80005a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005aa:	f7ff ff6b 	bl	8000484 <TIM_voidSetCallBackFunction>
	/* start TIM2 */
	TIM_voidStartTimer(TIM2);
 80005ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005b2:	f7ff ff41 	bl	8000438 <TIM_voidStartTimer>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	080005c1 	.word	0x080005c1

080005c0 <APP_toggleLed>:

void APP_toggleLed(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/* toggle led's state */
	GPIO_TogglePin('G', P13);
 80005c4:	210d      	movs	r1, #13
 80005c6:	2047      	movs	r0, #71	; 0x47
 80005c8:	f7ff fec4 	bl	8000354 <GPIO_TogglePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <APP_setupIOConfigs>:

void APP_setupIOConfigs(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
	/* setup I/O configs */
	GPIO_Init('G', P13, OUTPUT, PUSH_PULL, NO_PULLING);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	210d      	movs	r1, #13
 80005e0:	2047      	movs	r0, #71	; 0x47
 80005e2:	f7ff fdf7 	bl	80001d4 <GPIO_Init>
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <main>:


int main(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	/* setup I/O configs */
	APP_setupIOConfigs();
 80005f0:	f7ff ffee 	bl	80005d0 <APP_setupIOConfigs>
	/* setup tim2 */
	APP_toggleLedTaskSetup();
 80005f4:	f7ff ffc4 	bl	8000580 <APP_toggleLedTaskSetup>

	while (1) {
 80005f8:	e7fe      	b.n	80005f8 <main+0xc>
	...

080005fc <NVIC_voidEnableInterrupt>:
/****	Brief	:	enables the ext interrupt by the NVIC 				****/
/**** 	Return	:	None												****/
/****	param	:	bit number that corresponds to the ext peri			****/
/***************************************************************************/
void NVIC_voidEnableInterrupt(u8 copy_u8IntNumber)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[copy_u8IntNumber >> 5] = 1 << (copy_u8IntNumber & 0x001F);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	2201      	movs	r2, #1
 800060e:	fa02 f103 	lsl.w	r1, r2, r3
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <NVIC_voidEnableInterrupt+0x30>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000e100 	.word	0xe000e100

08000630 <RCC_voidEnableClock>:
#define SCB_CPACR			*(volatile u32*)(SCB_BASE_ADDRESS + 0x88)
/************************************************************/
/*						FUNCTION DEFINITIONS				*/
/************************************************************/

void RCC_voidEnableClock(u8 bus, u8 pin){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
	if(pin <= 31)
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b1f      	cmp	r3, #31
 8000644:	d847      	bhi.n	80006d6 <RCC_voidEnableClock+0xa6>
	{
		/* the inserted pin number is accessible in 32bit registers */
		/* now depending on the bus selected, we will select the register we want */
		switch(bus)
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b04      	cmp	r3, #4
 800064a:	d845      	bhi.n	80006d8 <RCC_voidEnableClock+0xa8>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <RCC_voidEnableClock+0x24>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000669 	.word	0x08000669
 8000658:	0800067f 	.word	0x0800067f
 800065c:	080006ab 	.word	0x080006ab
 8000660:	080006c1 	.word	0x080006c1
 8000664:	08000695 	.word	0x08000695
		{
			case RCC_AHB1:	SET_BIT(RCC_AHB1ENR, pin);	break;
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <RCC_voidEnableClock+0xb4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	79ba      	ldrb	r2, [r7, #6]
 800066e:	2101      	movs	r1, #1
 8000670:	fa01 f202 	lsl.w	r2, r1, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <RCC_voidEnableClock+0xb4>)
 8000678:	430b      	orrs	r3, r1
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	e02c      	b.n	80006d8 <RCC_voidEnableClock+0xa8>
			case RCC_AHB2:	SET_BIT(RCC_AHB2ENR, pin);	break;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <RCC_voidEnableClock+0xb8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	2101      	movs	r1, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <RCC_voidEnableClock+0xb8>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e021      	b.n	80006d8 <RCC_voidEnableClock+0xa8>
			case RCC_AHB3:	SET_BIT(RCC_AHB3ENR, pin);	break;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <RCC_voidEnableClock+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	2101      	movs	r1, #1
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <RCC_voidEnableClock+0xbc>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	e016      	b.n	80006d8 <RCC_voidEnableClock+0xa8>
			case RCC_APB1:	SET_BIT(RCC_APB1ENR, pin);	break;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <RCC_voidEnableClock+0xc0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	2101      	movs	r1, #1
 80006b2:	fa01 f202 	lsl.w	r2, r1, r2
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <RCC_voidEnableClock+0xc0>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6013      	str	r3, [r2, #0]
 80006be:	e00b      	b.n	80006d8 <RCC_voidEnableClock+0xa8>
			case RCC_APB2:	SET_BIT(RCC_APB2ENR, pin);	break;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <RCC_voidEnableClock+0xc4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	2101      	movs	r1, #1
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <RCC_voidEnableClock+0xc4>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	e000      	b.n	80006d8 <RCC_voidEnableClock+0xa8>
		}
	}
 80006d6:	bf00      	nop
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40023830 	.word	0x40023830
 80006e8:	40023834 	.word	0x40023834
 80006ec:	40023838 	.word	0x40023838
 80006f0:	40023840 	.word	0x40023840
 80006f4:	40023844 	.word	0x40023844

080006f8 <RCC_initSystemClock>:


void RCC_initSystemClock(void){
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

	/* use FPU */
	SCB_CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <RCC_initSystemClock+0x60>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <RCC_initSystemClock+0x60>)
 8000702:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000706:	6013      	str	r3, [r2, #0]

	/* set general RCC configurations */
	RCC_CFGR |= (AHB_APB1_DIV_FACTOR << 10) | (AHB_APB2_DIV_FACTOR << 13) | (SYSCLK_AHB_DIV_FACTOR << 4);
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <RCC_initSystemClock+0x64>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <RCC_initSystemClock+0x64>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6013      	str	r3, [r2, #0]

	RCC_CIR |= (LSI_INTERRUPT_ENABLE << 8)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <RCC_initSystemClock+0x68>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <RCC_initSystemClock+0x68>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_BDCR, 1)){}
#endif

#if SYSTEM_CLOCK_SRC == HSI_SRC
	/* set the trimming */
	RCC_CR |= TRIMMING_VALUE << 3;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <RCC_initSystemClock+0x6c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <RCC_initSystemClock+0x6c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6013      	str	r3, [r2, #0]

	/* enable HSI clock */
	SET_BIT(RCC_CR, 0);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <RCC_initSystemClock+0x6c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <RCC_initSystemClock+0x6c>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_CR, 1)){}
 800072c:	bf00      	nop
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <RCC_initSystemClock+0x6c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f9      	beq.n	800072e <RCC_initSystemClock+0x36>

	/* select HSI as system clock */
	RCC_CFGR &= ~0x03;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <RCC_initSystemClock+0x64>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <RCC_initSystemClock+0x64>)
 8000740:	f023 0303 	bic.w	r3, r3, #3
 8000744:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= HSI_SRC;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <RCC_initSystemClock+0x64>)
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <RCC_initSystemClock+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6013      	str	r3, [r2, #0]
#endif

#if MCO2_PC9_OUTPUT_PIN == ENABLE
	RCC_CFGR |= (MCO2_SRC << 30) | (MCO2_SRC_PRESCALER << 27);
#endif
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed88 	.word	0xe000ed88
 800075c:	40023808 	.word	0x40023808
 8000760:	4002380c 	.word	0x4002380c
 8000764:	40023800 	.word	0x40023800

08000768 <updateSystemClock>:
			case RCC_APB2:	CLR_BIT(RCC_APB2ENR, pin);	break;
		}
	}
}

static void updateSystemClock(void){
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
	u32 tmp, pllsource, pllm, pllp;
	float32  pllvco;
	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC_CFGR & (0x03 << 2);
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <updateSystemClock+0xe0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 030c 	and.w	r3, r3, #12
 8000776:	613b      	str	r3, [r7, #16]

	switch (tmp)
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	2b08      	cmp	r3, #8
 800077c:	d011      	beq.n	80007a2 <updateSystemClock+0x3a>
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b08      	cmp	r3, #8
 8000782:	d857      	bhi.n	8000834 <updateSystemClock+0xcc>
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <updateSystemClock+0x2a>
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d004      	beq.n	800079a <updateSystemClock+0x32>
 8000790:	e050      	b.n	8000834 <updateSystemClock+0xcc>
	{
	case 0x00:  /* HSI used as system clock source */
		system_clock = HSI_FREQ;
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <updateSystemClock+0xe4>)
 8000794:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <updateSystemClock+0xe8>)
 8000796:	601a      	str	r2, [r3, #0]
	  break;
 8000798:	e050      	b.n	800083c <updateSystemClock+0xd4>
	case 0x04:  /* HSE used as system clock source */
		system_clock = HSE_FREQ;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <updateSystemClock+0xe4>)
 800079c:	4a2d      	ldr	r2, [pc, #180]	; (8000854 <updateSystemClock+0xec>)
 800079e:	601a      	str	r2, [r3, #0]
	  break;
 80007a0:	e04c      	b.n	800083c <updateSystemClock+0xd4>
	case 0x08:  /* PLL used as system clock source */

	  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
		 SYSCLK = PLL_VCO / PLL_P
		 */
	  pllsource = (RCC_PLLCFGR & (0x01 << 22)) >> 22;
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <updateSystemClock+0xf0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	0d9b      	lsrs	r3, r3, #22
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
	  pllm = RCC_PLLCFGR & 0x3F;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <updateSystemClock+0xf0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007b6:	60bb      	str	r3, [r7, #8]

	  if (pllsource != HSI_SRC)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d011      	beq.n	80007e2 <updateSystemClock+0x7a>
	  {
		/* HSE used as PLL clock source */
		pllvco = (HSE_FREQ / pllm) * ((RCC_PLLCFGR & (0x1FF << 6)) >> 6);
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <updateSystemClock+0xec>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <updateSystemClock+0xf0>)
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	0992      	lsrs	r2, r2, #6
 80007cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	ee07 3a90 	vmov	s15, r3
 80007d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007dc:	edc7 7a05 	vstr	s15, [r7, #20]
 80007e0:	e010      	b.n	8000804 <updateSystemClock+0x9c>
	  }
	  else
	  {
		/* HSI used as PLL clock source */
		pllvco = (HSI_FREQ / pllm) * ((RCC_PLLCFGR & (0x1FF << 6)) >> 6);
 80007e2:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <updateSystemClock+0xe8>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <updateSystemClock+0xf0>)
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	0992      	lsrs	r2, r2, #6
 80007f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007f4:	fb02 f303 	mul.w	r3, r2, r3
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000800:	edc7 7a05 	vstr	s15, [r7, #20]
	  }

	  pllp = (((RCC_PLLCFGR & (0x03 << 16)) >>16) + 1 ) *2;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <updateSystemClock+0xf0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	0c1b      	lsrs	r3, r3, #16
 800080a:	f003 0303 	and.w	r3, r3, #3
 800080e:	3301      	adds	r3, #1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
	  system_clock = pllvco/pllp;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800081e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082a:	ee17 2a90 	vmov	r2, s15
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <updateSystemClock+0xe4>)
 8000830:	601a      	str	r2, [r3, #0]
	  break;
 8000832:	e003      	b.n	800083c <updateSystemClock+0xd4>
	default:
		system_clock = HSI_FREQ;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <updateSystemClock+0xe4>)
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <updateSystemClock+0xe8>)
 8000838:	601a      	str	r2, [r3, #0]
	  break;
 800083a:	bf00      	nop
	  tmp = SYSCLK_AHB_DIV_FACTOR - 7;

	  /* HCLK frequency */
	  system_clock >>= tmp;
	}
}
 800083c:	bf00      	nop
 800083e:	371c      	adds	r7, #28
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023808 	.word	0x40023808
 800084c:	2000002c 	.word	0x2000002c
 8000850:	00f42400 	.word	0x00f42400
 8000854:	017d7840 	.word	0x017d7840
 8000858:	40023804 	.word	0x40023804

0800085c <RCC_u32GetSystemClock>:

u32 RCC_u32GetSystemClock(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	updateSystemClock();
 8000860:	f7ff ff82 	bl	8000768 <updateSystemClock>
	return system_clock;
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <RCC_u32GetSystemClock+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000002c 	.word	0x2000002c

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000876:	490e      	ldr	r1, [pc, #56]	; (80008b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800088c:	4c0b      	ldr	r4, [pc, #44]	; (80008bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  RCC_initSystemClock
 800089a:	f7ff ff2d 	bl	80006f8 <RCC_initSystemClock>
/* Call static constructors */
    bl __libc_init_array
 800089e:	f000 f811 	bl	80008c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a2:	f7ff fea3 	bl	80005ec <main>
  bx  lr    
 80008a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80008b4:	0800092c 	.word	0x0800092c
  ldr r2, =_sbss
 80008b8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80008bc:	2000005c 	.word	0x2000005c

080008c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC_IRQHandler>
	...

080008c4 <__libc_init_array>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4d0d      	ldr	r5, [pc, #52]	; (80008fc <__libc_init_array+0x38>)
 80008c8:	4c0d      	ldr	r4, [pc, #52]	; (8000900 <__libc_init_array+0x3c>)
 80008ca:	1b64      	subs	r4, r4, r5
 80008cc:	10a4      	asrs	r4, r4, #2
 80008ce:	2600      	movs	r6, #0
 80008d0:	42a6      	cmp	r6, r4
 80008d2:	d109      	bne.n	80008e8 <__libc_init_array+0x24>
 80008d4:	4d0b      	ldr	r5, [pc, #44]	; (8000904 <__libc_init_array+0x40>)
 80008d6:	4c0c      	ldr	r4, [pc, #48]	; (8000908 <__libc_init_array+0x44>)
 80008d8:	f000 f818 	bl	800090c <_init>
 80008dc:	1b64      	subs	r4, r4, r5
 80008de:	10a4      	asrs	r4, r4, #2
 80008e0:	2600      	movs	r6, #0
 80008e2:	42a6      	cmp	r6, r4
 80008e4:	d105      	bne.n	80008f2 <__libc_init_array+0x2e>
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ec:	4798      	blx	r3
 80008ee:	3601      	adds	r6, #1
 80008f0:	e7ee      	b.n	80008d0 <__libc_init_array+0xc>
 80008f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f6:	4798      	blx	r3
 80008f8:	3601      	adds	r6, #1
 80008fa:	e7f2      	b.n	80008e2 <__libc_init_array+0x1e>
 80008fc:	08000924 	.word	0x08000924
 8000900:	08000924 	.word	0x08000924
 8000904:	08000924 	.word	0x08000924
 8000908:	08000928 	.word	0x08000928

0800090c <_init>:
 800090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090e:	bf00      	nop
 8000910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000912:	bc08      	pop	{r3}
 8000914:	469e      	mov	lr, r3
 8000916:	4770      	bx	lr

08000918 <_fini>:
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091a:	bf00      	nop
 800091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091e:	bc08      	pop	{r3}
 8000920:	469e      	mov	lr, r3
 8000922:	4770      	bx	lr
